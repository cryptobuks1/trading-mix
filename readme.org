# -*- org-use-property-inheritance: t; org-confirm-babel-evaluate: nil;-*-
* Trading
  :PROPERTIES:
  :header-args: python :prologue (progn (pipenv-activate) (pyvenv-activate python-shell-virtualenv-root) "")
  :END:
** Installation
** Prerequisites
#+NAME: install-prerequisites
#+HEADER: :session prerequisites
#+BEGIN_SRC sh
  sudo apt install octave octave-signal
#+END_SRC
All python dependencies can be installed with pipenv.
But fist pipenv needs to be installed:
#+BEGIN_SRC sh
pip3 install -U --user pipenv
#+END_SRC

#+RESULTS:
*** Issues
If things don't work try to go into ~~/.emacs.d/elpa/org~ and delete
any *.elc files
#+BEGIN_SRC sh
  find . -name "*.elc" -exec rm {} \;
#+END_SRC
** Application
#+NAME: app
#+HEADER: :tangle trader.py :session app
#+BEGIN_SRC ipython
  import warnings
  warnings.filterwarnings("ignore", message="numpy.dtype size changed")
  from trading.core import default_kraken_strategy
  from trading.sql import memdb, time_range
  from trading.kraken import ohlc, get_latest_order_epoc, create_order
  from trading.events import TradingEvents, bind
  import logging
  from datetime import datetime
  import pickle
  from os.path import expanduser, exists, dirname
  from os import makedirs

  logging.basicConfig(level=logging.DEBUG,
                      format='%(asctime)s %(levelname)-8s %(message)s',
                      datefmt='%Y-%m-%d %H:%M:%S')


  def main():
      store_data_p = False

      def buy(analysis):
          nonlocal store_data_p
          store_data_p = True
          create_order('buy', 5)

      def sell(analysis):
          nonlocal store_data_p
          store_data_p = True
          create_order('sell', 5)

      [strategy,
       events] = default_kraken_strategy(**{"buy_fn":
                                            buy,
                                            "sell_fn":
                                            sell,
                                            "latest_order_epoc_fn":
                                            get_latest_order_epoc,
                                            "window_size":
                                            3600 * 3})
      db = memdb()
      ohlc(**db)
      start, end = time_range(**db)
      logging.debug(start)
      logging.warn(end)

      def store_data(data):
          date = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
          data_path = expanduser('~/.local/lib/trading/data/order-data-' + date + '.sqlite')
          data_dir = dirname(data_path)
          if not exists(data_dir):
              makedirs(data_dir)
          with open(data_path, 'wb') as f:
              pickle.dump(data, f)

      ohlc_data = None

      def reference_data(data):
          nonlocal ohlc_data
          ohlc_data = data

      bind(TradingEvents.data.fget(events), lambda data: reference_data(data['data']))
      strategy(db)
      if store_data_p:
          store_data(ohlc_data)
          store_data_p = False



  if __name__ == "__main__":
      main()
#+END_SRC

*** Core
#+NAME: trading-core
#+HEADER: :tangle src/trading/core.py
#+BEGIN_SRC ipython
  from trading.sql import time_range, window
  from trading.strategy.simple import create
  from trading.data import TradeCommand
  from trading.events import TradingEvents, emit
  from collections import namedtuple


  TradeActions = namedtuple('TradeActions', ["buy", "sell", "wait"])


  def default_kraken_strategy(*,
                              buy_fn,
                              sell_fn,
                              latest_order_epoc_fn,
                              window_size=3600 * 5):
      global TradeActions
      tradeCommands = {
          TradeCommand.sell: sell_fn,
          TradeCommand.buy: buy_fn
      }

      engine, events = create(latest_order_epoc_fn, tradeCommands)

      def strategy(db, **kwargs):
          nonlocal engine
          start, end = time_range(**db)
          direction = kwargs.get("direction", "tail")
          offset = kwargs.get("offset", 0)
          if direction == "tail":
              window_start = end - offset - window_size
          elif direction == "head":
              window_start = start + offset

          window_end = window_start + window_size
          data = window(None,
                        window_start,
                        window_end, **db)
          emit(TradingEvents.data.fget(events), {"data": data})
          engine(data)


      return strategy, events

#+END_SRC
** Kraken
*** Buy
#+NAME: buy-monero
#+BEGIN_SRC ipython
  from trading.kraken import create_order

  create_order('buy', 10)
#+END_SRC

#+RESULTS: buy-monero
: # Out[15]:
: #+BEGIN_EXAMPLE
:   {'descr': {'order': 'buy 10.00000000 XMREUR @ market'},
:   'txid': ['OB2TSL-AHTMZ-3MGJ7P']}
: #+END_EXAMPLE

*** OHLC panda
#+NAME: kraken-ohcl-panda
#+BEGIN_SRC ipython
  from trading.kraken import connect
  k = connect()
  ohlc, _ = k.get_ohlc_data("XXMRZEUR")
  type(ohlc.iloc[0].open)
#+END_SRC

#+RESULTS: kraken-ohcl-panda
=# Out[7]:
: numpy.float64
==# Out[6]:
#+BEGIN_EXAMPLE
  time      1.534359e+09
  open      8.191000e+01
  high      8.191000e+01
  low       8.191000e+01
  close     8.191000e+01
  vwap      0.000000e+00
  volume    0.000000e+00
  count     0.000000e+00
  Name: 2018-08-15 18:46:00, dtype: float64
#+END_EXAMPLE
=#+end_example

*** Kraken help
#+NAME: kraken-help
#+HEADER: :results drawer output
#+BEGIN_SRC python
  from pykrakenapi import KrakenAPI
  help(KrakenAPI)
#+END_SRC

#+RESULTS: kraken-help
:RESULTS:
Help on class KrakenAPI in module pykrakenapi.pykrakenapi:

class KrakenAPI(builtins.object)
 |  A python implementation of the Kraken API.
 |
 |  Implements the Kraken API methods using the low-level krakenex python
 |  package. See
 |  https://www.kraken.com/help/api
 |  and
 |  https://github.com/veox/python3-krakenex
 |
 |  Parameters
 |  ----------
 |  api : krakenex.API
 |      An instance of the krakenex.API class. A reference to the input
 |      is created and accessible via ``KrakenAPI.api``.
 |
 |  tier : int, optional (default=3)
 |      Your Kraken tier level, used to adjust the limit of the call rate to
 |      the Kraken API in order to prevent 15 minute temporary lockouts. See
 |      https://support.kraken.com/hc/en-us/articles/206548367.
 |      Set tier=0 to disable the call rate limiter.
 |
 |  retry : float, optional (default=.5)
 |      Sleep for ``retry`` seconds after an HTTPError/KrakenAPIError occurred
 |      and retry the query until it is succesful (or the call rate limiter was
 |      triggered). If ``retry`` is set to 0, raise a potential
 |      HTTPError/KrakenAPIError instead of retrying the query.
 |
 |  crl_sleep : int, optional (default=5)
 |      Sleep for ``crl_sleep`` seconds after a CallRateLimitError occurred,
 |      then retry the query. If ``crl_sleep`` is set to 0, raise a potential
 |      CallRateLimitError instead of sleeping and retrying.
 |
 |  Attributes
 |  ----------
 |  api : krakenex.API
 |      See Parameters.
 |
 |  Methods defined here:
 |
 |  __init__(self, api, tier=3, retry=0.5, crl_sleep=5)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  add_standard_order(self, pair, type, ordertype, volume, price=None, price2=None, leverage=None, oflags=None, starttm=0, expiretm=0, userref=None, validate=True, close_ordertype=None, close_price=None, close_price2=None, otp=None, trading_agreement='agree')
 |      Add a standard order.
 |
 |      Add a standard order and return an order description info and an array
 |      of transaction ids for the order (if succesfull).
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Asset pair.
 |
 |      type : str
 |          Type of order (buy/sell).
 |
 |      ordertype : str
 |          Order type, one of:
 |          market
 |          limit (price = limit price)
 |          stop-loss (price = stop loss price)
 |          take-profit (price = take profit price)
 |          stop-loss-profit (price = stop loss price, price2 = take profit
 |              price)
 |          stop-loss-profit-limit (price = stop loss price, price2 = take
 |              profit price)
 |          stop-loss-limit (price = stop loss trigger price, price2 =
 |              triggered limit price)
 |          take-profit-limit (price = take profit trigger price, price2 =
 |              triggered limit price)
 |          trailing-stop (price = trailing stop offset)
 |          trailing-stop-limit (price = trailing stop offset, price2 =
 |              triggered limit offset)
 |          stop-loss-and-limit (price = stop loss price, price2 = limit price)
 |          settle-position
 |
 |      volume : str
 |          Order volume in lots. For minimum order sizes, see
 |          https://support.kraken.com/hc/en-us/articles/205893708
 |
 |      price : str, optional (default=None)
 |          Price (optional). Dependent upon ordertype
 |
 |      price2 : str, optional (default=None)
 |          Secondary price (optional). Dependent upon ordertype
 |
 |      leverage : str, optional (default=None)
 |          Amount of leverage desired (optional). Default = none
 |
 |      oflags : str, optional (default=None)
 |          Comma delimited list of order flags:
 |          viqc = volume in quote currency (not available for leveraged
 |              orders)
 |          fcib = prefer fee in base currency
 |          fciq = prefer fee in quote currency
 |          nompp = no market price protection
 |          post = post only order (available when ordertype = limit)
 |
 |      starttm : int, optional (default=None)
 |          Scheduled start time:
 |          0 = now (default)
 |          +<n> = schedule start time <n> seconds from now
 |          <n> = unix timestamp of start time
 |
 |      expiretm : int, optional (default=None)
 |          Expiration time:
 |          0 = no expiration (default)
 |          +<n> = expire <n> seconds from now
 |          <n> = unix timestamp of expiration time
 |
 |      userref : int, optional (default=None)
 |          User reference id.  32-bit signed number.
 |
 |      validate : bool, optional (default=True)
 |          Validate inputs only.  Do not submit order (default).
 |
 |      optional closing order to add to system when order gets filled:
 |          close[ordertype] = order type
 |          close[price] = price
 |          close[price2] = secondary price
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      res : dict
 |          res['descr'] = order description info
 |              order = order description
 |              close = conditional close order description (if conditional
 |                  close set)
 |          res['txid'] = array of transaction ids for order (if order was
 |              added successfully)
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |          Errors: errors include (but are not limited to):
 |          EGeneral:Invalid arguments
 |          EService:Unavailable
 |          ETrade:Invalid request
 |          EOrder:Cannot open position
 |          EOrder:Cannot open opposing position
 |          EOrder:Margin allowance exceeded
 |          EOrder:Margin level too low
 |          EOrder:Insufficient margin (exchange does not have sufficient funds
 |              to allow margin trading)
 |          EOrder:Insufficient funds (insufficient user funds)
 |          EOrder:Order minimum not met (volume too low)
 |          EOrder:Orders limit exceeded
 |          EOrder:Positions limit exceeded
 |          EOrder:Rate limit exceeded
 |          EOrder:Scheduled orders limit exceeded
 |          EOrder:Unknown position
 |
 |      Notes
 |      -----
 |      See get_tradable_asset_pairs for specifications on asset pair prices,
 |      lots, and leverage.
 |
 |      Prices can be preceded by +, -, or # to signify the price as a relative
 |      amount (with the exception of trailing stops, which are always
 |      relative). + adds the amount to the current offered price. - subtracts
 |      the amount from the current offered price. # will either add or
 |      subtract the amount to the current offered price, depending on the type
 |      and order type used. Relative prices can be suffixed with a % to
 |      signify the relative amount as a percentage of the offered price.
 |
 |      For orders using leverage, 0 can be used for the volume to auto-fill
 |      the volume needed to close out your position.
 |
 |      If you receive the error "EOrder:Trading agreement required", refer to
 |      your API key management page for further details.
 |
 |  cancel_open_order(self, txid, otp=None)
 |      UNTESTED!
 |
 |      Cancel open order(s).
 |
 |      Cancel open order with transaction id ``txid``.
 |
 |      Parameters
 |      ----------
 |      txid : str
 |          Transaction id.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      count : int
 |          Number of orders canceled.
 |
 |      pending : bool
 |          If set, order(s) is/are pending cancellation.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      Notes
 |      -----
 |      txid may be a user reference id.
 |
 |  datetime_to_unixtime(self, dt)
 |      Return unixtime for a given datetime.
 |
 |      Parameters
 |      ----------
 |      dt : datetime.datetime
 |          The datetime to convert to unixtime.
 |
 |      Returns
 |      -------
 |      unixtime : int
 |          The unixtime corresponding to the given datetime.
 |
 |  get_account_balance(self, otp=None)
 |      Get asset names and balance amount.
 |
 |      Return a ``pd.DataFrame`` of asset names and their corresponding
 |      balance amounts.
 |
 |      Parameters
 |      ----------
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      balance : pd.DataFrame
 |          Table containing asset names and balance amount.
 |          index = asset name
 |          vol = balance amount
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  get_asset_info(self, info=None, aclass=None, asset=None)
 |      Get asset info.
 |
 |      Return a ``pd.DataFrame`` of asset names and their info.
 |
 |      Parameters
 |      ----------
 |      info : ?, optional (default=None)
 |          Info to retrieve. If None (default), retrieve all info.
 |
 |      aclass : str, optional (default=None)
 |          Asset class. If None (default), aclass='currency'.
 |
 |      asset : str, optional (default=None)
 |          Comma delimited list of assets to get info on. If None (default),
 |          all for given asset class.
 |
 |      Returns
 |      -------
 |      assets : pd.DataFrame
 |          index = asset name
 |          aclass = asset class
 |          altname = alternate name
 |          decimals = scaling decimal places for record keeping
 |          display_decimals = scaling decimal places for output display.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  get_closed_orders(self, trades=False, userref=None, start=None, end=None, ofs=None, closetime=None, otp=None)
 |      Get closed orders info.
 |
 |      Return a ``pd.DataFrame`` of closed orders info.
 |
 |      Parameters
 |      ----------
 |      trades : bool, optional (default=False)
 |          Whether or not to include trades in output.
 |
 |      userref : int, optional (default=None)
 |          Restrict results to given user reference id.
 |
 |      start : int, optional (default=None)
 |          Starting unixtime or order tx id of results (exclusive).
 |
 |      end : int, optional (default=None)
 |          Ending unixtime or order tx id of results (inclusive)-
 |
 |      ofs : ?, optional (default=None)
 |          Result offset.
 |
 |      closetime : str, optional (default=None)
 |          Which time to use, must be one of {'open', 'close', 'both'}. If
 |          None (default), closetime='both'.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      closed : pd.DataFrame
 |          Array of order info.  See Get open orders.  Additional fields:
 |          closetm = unix timestamp of when order was closed
 |          reason = additional info on status (if any)
 |
 |      count :
 |          Amount of available order info matching criteria.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Times given by order tx ids are more accurate than unix timestamps. If
 |      an order tx id is given for the time, the order's open time is used.
 |
 |  get_ledgers_info(self, aclass=None, asset=None, type='all', start=None, end=None, ofs=None, otp=None, ascending=False)
 |      Get ledgers info.
 |
 |      Return a ``pd.DataFrame`` of ledgers info.
 |
 |      Parameters
 |      ----------
 |      aclass : str, optional (default=None)
 |          Asset class. If None (default), aclass='currency'.
 |
 |      asset : str, optional (default=None)
 |          Comma delimited list of assets to restrict output to. If None
 |          (default), all for given asset class.
 |
 |      type : str, optional (default='all')
 |          Type of ledger to retrieve, must be one of {'all', 'deposit',
 |          'withdrawal', 'trade', 'margin'}
 |
 |      start : int, optional (default=None)
 |          Starting unixtime or ledger id of results (exclusive).
 |
 |      end : int, optional (default=None)
 |          Ending unixtime or ledger id of results (inclusive)
 |
 |      ofs : ?, optional (default=None)
 |          Result offset.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      ledger : pd.DataFrame
 |          ledger_id = ledger info
 |          refid = reference id
 |          time = unx timestamp of ledger
 |          type = type of ledger entry
 |          aclass = asset class
 |          asset = asset
 |          amount = transaction amount
 |          fee = transaction fee
 |          balance = resulting balance
 |
 |      count : int
 |          Amount of available ledger info matching criteria.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Times given by ledger ids are more accurate than unix timestamps.
 |
 |  get_ohlc_data(self, pair, interval=1, since=None, ascending=False)
 |      Get ohlc data for a given pair.
 |
 |      Return a ``pd.DataFrame`` of the OHLC data for a given pair and time
 |      interval (minutes). Optionally, return data from ``since`` onwards
 |      (exclusive).
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Asset pair to get OHLC data for.
 |
 |      interval : int, optional (default=1)
 |          Time frame interval in minutes. Defaults to 1. One of
 |          {1, 5, 15, 30, 60, 240, 1440, 10080, 21600}.
 |
 |      since : int, optional (default=None)
 |          Return committed OHLC data since given unixtime (exclusive). If
 |          None, retrieve from earliest time possible.
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      ohlc : pd.DataFrame
 |          index = datetime (UTC)
 |          time (unixtime)
 |          open
 |          high
 |          low
 |          close
 |          vwap
 |          volume
 |          count
 |
 |      last : int
 |          Unixtime to be used as since when polling for new, committed OHLC
 |          data.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      The last entry in the OHLC array is for the current, not-yet-committed
 |      frame and will always be present, regardless of the value of "since".
 |
 |  get_open_orders(self, trades=False, userref=None, otp=None)
 |      Get open orders info.
 |
 |      Return a dictionary of open orders info.
 |
 |      Parameters
 |      ----------
 |      trades : bool, optional (default=False)
 |          Whether or not to include trades in output.
 |
 |      userref : int, optional (default=None)
 |          Restrict results to given user reference id.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      open : pd.DataFrame
 |          refid = Referral order transaction id that created this order
 |          userref = user reference id
 |          status = status of order:
 |              pending = order pending book entry
 |              open = open order
 |              closed = closed order
 |              canceled = order canceled
 |              expired = order expired
 |          opentm = unix timestamp of when order was placed
 |          starttm = unix timestamp of order start time (or 0 if not set)
 |          expiretm = unix timestamp of order end time (or 0 if not set)
 |          descr = order description info
 |              pair = asset pair
 |              type = type of order (buy/sell)
 |              ordertype = order type (See Add standard order)
 |              price = primary price
 |              price2 = secondary price
 |              leverage = amount of leverage
 |              order = order description
 |              close = conditional close order description (if conditional
 |                  close set)
 |          vol = volume of order (base currency unless viqc set in oflags)
 |          vol_exec = volume executed (base currency unless viqc set in
 |              oflags)
 |          cost = total cost (quote currency unless unless viqc set in oflags)
 |          fee = total fee (quote currency)
 |          price = average price (quote currency unless viqc set in oflags)
 |          stopprice = stop price (quote currency, for trailing stops)
 |          limitprice = triggered limit price (quote currency, when limit
 |              based order type triggered)
 |          misc = comma delimited list of miscellaneous info
 |              stopped = triggered by stop price
 |              touched = triggered by touch price
 |              liquidated = liquidation
 |              partial = partial fill
 |          oflags = comma delimited list of order flags
 |              viqc = volume in quote currency
 |              fcib = prefer fee in base currency (default if selling)
 |              fciq = prefer fee in quote currency (default if buying)
 |              nompp = no market price protection
 |          trades = array of trade ids related to order (if trades info
 |              requested and data available)
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Unless otherwise stated, costs, fees, prices, and volumes are in the
 |      asset pair's scale, not the currency's scale. For example, if the asset
 |      pair uses a lot size that has a scale of 8, the volume will use a scale
 |      of 8, even if the currency it represents only has a scale of 2.
 |      Similarly, if the asset pair's pricing scale is 5, the scale will
 |      remain as 5, even if the underlying currency has a scale of 8.
 |
 |  get_open_positions(self, txid=None, docalcs=False, otp=None)
 |      UNTESTED!
 |
 |      Get open positins info.
 |
 |      Return a ``pd.DataFrame`` of open positions info.
 |
 |      Parameters
 |      ----------
 |      txid : str, optional (default=None)
 |          Comma delimited list of transaction ids to restrict output to.
 |
 |      docalcs : bool, optional (default=False)
 |          Whether or not to include profit/loss calculations.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      openpositions : pd.DataFrame
 |          txid =
 |          ordertxid = order responsible for execution of trade
 |          pair = asset pair
 |          time = unix timestamp of trade
 |          type = type of order used to open position (buy/sell)
 |          ordertype = order type used to open position
 |          cost = opening cost of position (quote currency unless viqc set in
 |              oflags)
 |          fee = opening fee of position (quote currency)
 |          vol = position volume (base currency unless viqc set in oflags)
 |          vol_closed = position volume closed (base currency unless viqc set
 |              in oflags)
 |          margin = initial margin (quote currency)
 |          value = current value of remaining position (if docalcs requested.
 |              quote currency)
 |          net = unrealized profit/loss of remaining position (if docalcs
 |              requested.  quote currency, quote currency scale)
 |          misc = comma delimited list of miscellaneous info
 |          oflags = comma delimited list of order flags
 |              viqc = volume in quote currency
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Unless otherwise stated, costs, fees, prices, and volumes are in the
 |      asset pair's scale, not the currency's scale.
 |
 |  get_order_book(self, pair, count=100, ascending=False)
 |      Get order book (market depth).
 |
 |      Return a ``pd.DataFrame`` for both asks and bids for a given pair.
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Asset pair to get market depth for.
 |
 |      count : int, optional (default=100)
 |          Maximum number of asks/bids. Per default, get the latest 100
 |          bids and asks.
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      asks : pd.DataFrame
 |          The ask side table.
 |          index = datetime
 |          price
 |          volume
 |          time (unixtime)
 |
 |      bids : pd.DataFrame
 |          The bid side table.
 |          index = datetime
 |          price
 |          volume
 |          time (unixtime)
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  get_recent_spread_data(self, pair, since=None, ascending=False)
 |      Get recent spread data.
 |
 |      Return a ``pd.DataFrame`` of recent spread data for a given pair,
 |      optionally from ``since`` onwards (inclusive).
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Asset pair to get spread data for.
 |
 |      since : int, optional (default=None)
 |          Return spread data since given unixtime (inclusive). If
 |          None, retrieve from earliest time possible.
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      trades : pd.DataFrame
 |          Table containing recent spread for a given pair.
 |          index = datetime
 |          time (unixtime)
 |          bid
 |          ask
 |          spread (ask - bid)
 |
 |      last : int
 |          Unixtime to be used as since when polling for new spread data.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      ``since`` is inclusive so any returned data with the same time as the
 |      previous set should overwrite all of the previous set's entries at that
 |      time.
 |
 |  get_recent_trades(self, pair, since=None, ascending=False)
 |      Get recent trades data.
 |
 |      Return a ``pd.DataFrame`` of recent trade data for a given pair,
 |      optionally from ``since`` onwards (exclusive).
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Asset pair to get trade data for.
 |
 |      since : int, optional (default=None)
 |          Return trade data since given unixtime (exclusive). If
 |          None, retrieve from earliest time possible.
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      trades : pd.DataFrame
 |          Table containing recent trades for a given pair.
 |          index = datetime
 |          price
 |          volume
 |          time (unixtime)
 |          buy/sell
 |          market/limit
 |          miscellaneous
 |
 |      last : int
 |          Unixtime to be used as since when polling for new trade data.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  get_server_time(self)
 |      Get server time.
 |
 |      This is to aid in approximating the skew time between the server and
 |      client.
 |
 |      Returns
 |      -------
 |      dt : pandas._libs.tslib.Timestamp
 |          The server's datetime.
 |      unixtime : int
 |          The unix timestamp.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  get_ticker_information(self, pair)
 |      Get ticker information.
 |
 |      Return a ``pd.DataFrame`` of pair names and their ticker info.
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Comma delimited list of asset pairs to get info on.
 |
 |      Returns
 |      -------
 |      ticker : pd.DataFrame
 |          index =  pair name
 |          a = ask array(<price>, <whole lot volume>, <lot volume>),
 |          b = bid array(<price>, <whole lot volume>, <lot volume>),
 |          c = last trade closed array(<price>, <lot volume>),
 |          v = volume array(<today>, <last 24 hours>),
 |          p = volume weighted average price array(<today>, <last 24 hours>),
 |          t = number of trades array(<today>, <last 24 hours>),
 |          l = low array(<today>, <last 24 hours>),
 |          h = high array(<today>, <last 24 hours>),
 |          o = today's opening price
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Today's prices start at 00:00:00 UTC.
 |
 |  get_tradable_asset_pairs(self, info=None, pair=None)
 |      Get tradable asset pairs.
 |
 |      Return a ``pd.DataFrame`` of pair names and their info.
 |
 |      Parameters
 |      ----------
 |      info : str, optional (default=None)
 |          Info to retrieve. Can be one of {'leverage', 'fees', 'margin'}.
 |          If None (default), retrieve all info.
 |
 |      pair : str, optional (default=None)
 |          Comma delimited list of asset pairs to get info on. If None
 |          (default), all.
 |
 |      Returns
 |      -------
 |      pairs : pd.DataFrame
 |          index = pair name
 |          altname = alternate pair name
 |          aclass_base = asset class of base component
 |          base = asset id of base component
 |          aclass_quote = asset class of quote component
 |          quote = asset id of quote component
 |          lot = volume lot size
 |          pair_decimals = scaling decimal places for pair
 |          lot_decimals = scaling decimal places for volume
 |          lot_multiplier = amount to multiply lot volume by to get currency
 |              volume
 |          leverage_buy = array of leverage amounts available when buying
 |          leverage_sell = array of leverage amounts available when selling
 |          fees = fee schedule array in [volume, percent fee] tuples
 |          fees_maker = maker fee schedule array in [volume, percent fee]
 |              tuples (if on maker/taker)
 |          fee_volume_currency = volume discount currency
 |          margin_call = margin call level
 |          margin_stop = stop-out/liquidation margin level
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      If an asset pair is on a maker/taker fee schedule, the taker side is
 |      given in "fees" and maker side in "fees_maker". For pairs not on
 |      maker/taker, they will only be given in "fees".
 |
 |  get_trade_balance(self, aclass='currency', asset='ZEUR', otp=None)
 |      Get trade balance info.
 |
 |      Return a ``pd.DataFrame`` of trade balance info.
 |
 |      Parameters
 |      ----------
 |      aclass : str, optional (default='currency')
 |          Asset class.
 |
 |      asset : str, optional (default='ZUSD')
 |          Base asset used to determine balance.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      tradebalance : pd.DataFrame
 |          Table containing trade balance info.
 |          eb = equivalent balance (combined balance of all currencies)
 |          tb = trade balance (combined balance of all equity currencies)
 |          m = margin amount of open positions
 |          n = unrealized net profit/loss of open positions
 |          c = cost basis of open positions
 |          v = current floating valuation of open positions
 |          e = equity = trade balance + unrealized net profit/loss
 |          mf = free margin = equity - initial margin (maximum margin
 |              available to open new positions)
 |          ml = margin level = (equity / initial margin) * 100
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Rates used for the floating valuation is the midpoint of the best bid
 |      and ask prices.
 |
 |  get_trade_volume(self, pair=None, fee_info=True, otp=None)
 |      Get trade volume.
 |
 |      Return a ``pd.DataFrame`` of trade volume.
 |
 |      Parameters
 |      ----------
 |      pair : str, optional (default=None)
 |          Comma delimited list of asset pairs to get fee info on. If None
 |          (default), no fee info is provided.
 |
 |      fee_info : bool, optional (default=True)
 |          Whether or not to include fee info in results.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      currency : str
 |          Currency (ZUSD).
 |
 |      volume : float
 |          Current discount volume.
 |
 |      fees : pd.DataFrame
 |          Asset pairs and fee tier info (if requested)
 |              fee = current fee in percent
 |              minfee = minimum fee for pair (if not fixed fee)
 |              maxfee = maximum fee for pair (if not fixed fee)
 |              nextfee = next tier's fee for pair (if not fixed fee. nil if
 |                  at lowest fee tier)
 |              nextvolume = volume level of next tier (if not fixed fee. nil
 |                  if at lowest fee tier)
 |              tiervolume = volume level of current tier (if not fixed fee.
 |                  nil if at lowest fee tier)
 |
 |      fees_maker : pd.DataFrame
 |          Asset pairs and maker fee tier info (if requested) for any pairs on
 |                  maker/taker schedule
 |              fee = current fee in percent
 |              minfee = minimum fee for pair (if not fixed fee)
 |              maxfee = maximum fee for pair (if not fixed fee)
 |              nextfee = next tier's fee for pair (if not fixed fee. nil if
 |                  at lowest fee tier)
 |              nextvolume = volume level of next tier (if not fixed fee. nil
 |                  if at lowest fee tier)
 |              tiervolume = volume level of current tier (if not fixed fee.
 |                  nil if at lowest fee tier)
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      If an asset pair is on a maker/taker fee schedule, the taker side is
 |      given in "fees" and maker side in "fees_maker". For pairs not on
 |      maker/taker, they will only be given in "fees".
 |
 |  get_trades_history(self, type='all', trades=False, start=None, end=None, ofs=None, otp=None, ascending=False)
 |      Get trades history.
 |
 |      Return a ``pd.DataFrame`` of the trade history.
 |
 |      Parameters
 |      ----------
 |      type : str, optional (default='all')
 |          Type of trade, must be one of:
 |              'all' (default)    : all types (default)
 |              'any position'     : any position (open or closed)
 |              'closed position'  : positions that have been closed
 |              'closing position' : any trade closing all or part of a
 |                                   position
 |              'no position'      : non-positional trades
 |
 |      trades : bool, optional (default=False)
 |          Whether or not to include trades related to position in output.
 |
 |      start : int, optional (default=None)
 |          Starting unixtime or trade tx id of results (exclusive).
 |
 |      end : int, optional (default=None)
 |          Ending unixtime or trade tx id of results (inclusive).
 |
 |      ofs : ?, optional (default=None)
 |          Result offset.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      trades : pd.DataFrame
 |          index = datetime
 |          txid = trade txid
 |          ordertxid = order responsible for execution of trade
 |          pair = asset pair
 |          time = unix timestamp of trade
 |          type = type of order (buy/sell)
 |          ordertype = order type
 |          price = average price order was executed at (quote currency)
 |          cost = total cost of order (quote currency)
 |          fee = total fee (quote currency)
 |          vol = volume (base currency)
 |          margin = initial margin (quote currency)
 |          misc = comma delimited list of miscellaneous info
 |              closing = trade closes all or part of a position
 |
 |          If the trade opened a position, the following fields are also
 |          present in the trade info:
 |
 |          posstatus = position status (open/closed)
 |          cprice = average price of closed portion of position (quote
 |              currency)
 |          ccost = total cost of closed portion of position (quote currency)
 |          cfee = total fee of closed portion of position (quote currency)
 |          cvol = total fee of closed portion of position (quote currency)
 |          cmargin = total margin freed in closed portion of position (quote
 |              currency)
 |          net = net profit/loss of closed portion of position (quote
 |              currency, quote currency scale)
 |          trades = list of closing trades for position (if available)
 |
 |      count : int
 |          Amount of available trades info matching criteria.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |      Notes
 |      -----
 |      Unless otherwise stated, costs, fees, prices, and volumes are in the
 |      asset pair's scale, not the currency's scale.
 |
 |      Times given by trade tx ids are more accurate than unix timestamps.
 |
 |  query_ledgers(self, id, otp=None, ascending=False)
 |      Query ledgers info.
 |
 |      Return a ``pd.DataFrame`` of ledgers info.
 |
 |      Parameters
 |      ----------
 |      id : int
 |          Comma delimited list of ledger ids to query info about
 |          (20 maximum).
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      ledgers : pd.DataFrame
 |          ledger_id = ledger info.  See get_ledgers_info.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  query_orders_info(self, txid, trades=False, userref=None, otp=None)
 |      Query orders info.
 |
 |      Return a ``pd.DataFrame`` of orders info.
 |
 |      Parameters
 |      ----------
 |      txid : str
 |          Comma delimited list of transaction ids to query info about
 |          (20 maximum).
 |
 |      trades : bool, optional (default=False)
 |          Whether or not to include trades in output.
 |
 |      userref : int, optional (default=None)
 |          Restrict results to given user reference id.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      orders : pd.DataFrame
 |          order_txid = order info.  See get_open_orders/get_closed_orders.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  query_trades_info(self, txid, trades=False, otp=None, ascending=False)
 |      Query trades info.
 |
 |      Return a ``pd.DataFrame`` of trades info.
 |
 |      Parameters
 |      ----------
 |      txid : str
 |          Comma delimited list of transaction ids to query info about
 |          (20 maximum).
 |
 |      trades : bool, optional (default=False)
 |          Whether or not to include trades related to position in output.
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      ascending : bool, optional (default=False)
 |          If set to True, the data frame will be sorted with the most recent
 |          date in the last position. When set to False, the most recent date
 |          is in the first position.
 |
 |      Returns
 |      -------
 |      trades : pd.DataFrame
 |          See get_trades_history.
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |
 |      CallRateLimitError
 |          The call rate limiter blocked the query.
 |
 |  unixtime_to_datetime(self, unixtime)
 |      Return datetime (UTC) for a given unixtime.
 |
 |      Parameters
 |      ----------
 |      unixtime : int
 |          The unixtime to convert to datetime.
 |
 |      Returns
 |      -------
 |      datetime : datetime.datetime
 |          The datetime (UTC) corresponding to the given unixtime.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)

:END:
None

*** Kraken create order
**** create order documentation
#+BEGIN_ASCII
class KrakenAPI(builtins.object)
 |  A python implementation of the Kraken API.
 |
 |  Implements the Kraken API methods using the low-level krakenex python
 |  package. See
 |  https://www.kraken.com/help/api
 |  and
 |  https://github.com/veox/python3-krakenex
 |
 |  Parameters
 |  ----------
 |  api : krakenex.API
 |      An instance of the krakenex.API class. A reference to the input
 |      is created and accessible via ``KrakenAPI.api``.
 |
 |  tier : int, optional (default=3)
 |      Your Kraken tier level, used to adjust the limit of the call rate to
 |      the Kraken API in order to prevent 15 minute temporary lockouts. See
 |      https://support.kraken.com/hc/en-us/articles/206548367.
 |      Set tier=0 to disable the call rate limiter.
 |
 |  retry : float, optional (default=.5)
 |      Sleep for ``retry`` seconds after an HTTPError/KrakenAPIError occurred
 |      and retry the query until it is succesful (or the call rate limiter was
 |      triggered). If ``retry`` is set to 0, raise a potential
 |      HTTPError/KrakenAPIError instead of retrying the query.
 |
 |  crl_sleep : int, optional (default=5)
 |      Sleep for ``crl_sleep`` seconds after a CallRateLimitError occurred,
 |      then retry the query. If ``crl_sleep`` is set to 0, raise a potential
 |      CallRateLimitError instead of sleeping and retrying.
 |
 |  Attributes
 |  ----------
 |  api : krakenex.API
 |      See Parameters.
 |
 |  Methods defined here:
 |
 |  __init__(self, api, tier=3, retry=0.5, crl_sleep=5)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  add_standard_order(self, pair, type, ordertype, volume, price=None, price2=None, leverage=None, oflags=None, starttm=0, expiretm=0, userref=None, validate=True, close_ordertype=None, close_price=None, close_price2=None, otp=None, trading_agreement='agree')
 |      Add a standard order.
 |
 |      Add a standard order and return an order description info and an array
 |      of transaction ids for the order (if succesfull).
 |
 |      Parameters
 |      ----------
 |      pair : str
 |          Asset pair.
 |
 |      type : str
 |          Type of order (buy/sell).
 |
 |      ordertype : str
 |          Order type, one of:
 |          market
 |          limit (price = limit price)
 |          stop-loss (price = stop loss price)
 |          take-profit (price = take profit price)
 |          stop-loss-profit (price = stop loss price, price2 = take profit
 |              price)
 |          stop-loss-profit-limit (price = stop loss price, price2 = take
 |              profit price)
 |          stop-loss-limit (price = stop loss trigger price, price2 =
 |              triggered limit price)
 |          take-profit-limit (price = take profit trigger price, price2 =
 |              triggered limit price)
 |          trailing-stop (price = trailing stop offset)
 |          trailing-stop-limit (price = trailing stop offset, price2 =
 |              triggered limit offset)
 |          stop-loss-and-limit (price = stop loss price, price2 = limit price)
 |          settle-position
 |
 |      volume : str
 |          Order volume in lots. For minimum order sizes, see
 |          https://support.kraken.com/hc/en-us/articles/205893708
 |
 |      price : str, optional (default=None)
 |          Price (optional). Dependent upon ordertype
 |
 |      price2 : str, optional (default=None)
 |          Secondary price (optional). Dependent upon ordertype
 |
 |      leverage : str, optional (default=None)
 |          Amount of leverage desired (optional). Default = none
 |
 |      oflags : str, optional (default=None)
 |          Comma delimited list of order flags:
 |          viqc = volume in quote currency (not available for leveraged
 |              orders)
 |          fcib = prefer fee in base currency
 |          fciq = prefer fee in quote currency
 |          nompp = no market price protection
 |          post = post only order (available when ordertype = limit)
 |
 |      starttm : int, optional (default=None)
 |          Scheduled start time:
 |          0 = now (default)
 |          +<n> = schedule start time <n> seconds from now
 |          <n> = unix timestamp of start time
 |
 |      expiretm : int, optional (default=None)
 |          Expiration time:
 |          0 = no expiration (default)
 |          +<n> = expire <n> seconds from now
 |          <n> = unix timestamp of expiration time
 |
 |      userref : int, optional (default=None)
 |          User reference id.  32-bit signed number.
 |
 |      validate : bool, optional (default=True)
 |          Validate inputs only.  Do not submit order (default).
 |
 |      optional closing order to add to system when order gets filled:
 |          close[ordertype] = order type
 |          close[price] = price
 |          close[price2] = secondary price
 |
 |      otp : str
 |          Two-factor password (if two-factor enabled, otherwise not required)
 |
 |      Returns
 |      -------
 |      res : dict
 |          res['descr'] = order description info
 |              order = order description
 |              close = conditional close order description (if conditional
 |                  close set)
 |          res['txid'] = array of transaction ids for order (if order was
 |              added successfully)
 |
 |      Raises
 |      ------
 |      HTTPError
 |          An HTTP error occurred.
 |
 |      KrakenAPIError
 |          A kraken.com API error occurred.
 |          Errors: errors include (but are not limited to):
 |          EGeneral:Invalid arguments
 |          EService:Unavailable
 |          ETrade:Invalid request
 |          EOrder:Cannot open position
 |          EOrder:Cannot open opposing position
 |          EOrder:Margin allowance exceeded
 |          EOrder:Margin level too low
 |          EOrder:Insufficient margin (exchange does not have sufficient funds
 |              to allow margin trading)
 |          EOrder:Insufficient funds (insufficient user funds)
 |          EOrder:Order minimum not met (volume too low)
 |          EOrder:Orders limit exceeded
 |          EOrder:Positions limit exceeded
 |          EOrder:Rate limit exceeded
 |          EOrder:Scheduled orders limit exceeded
 |          EOrder:Unknown position
 |
 |      Notes
 |      -----
 |      See get_tradable_asset_pairs for specifications on asset pair prices,
 |      lots, and leverage.
 |
 |      Prices can be preceded by +, -, or # to signify the price as a relative
 |      amount (with the exception of trailing stops, which are always
 |      relative). + adds the amount to the current offered price. - subtracts
 |      the amount from the current offered price. # will either add or
 |      subtract the amount to the current offered price, depending on the type
 |      and order type used. Relative prices can be suffixed with a % to
 |      signify the relative amount as a percentage of the offered price.
 |
 |      For orders using leverage, 0 can be used for the volume to auto-fill
 |      the volume needed to close out your position.
 |
 |      If you receive the error "EOrder:Trading agreement required", refer to
 |      your API key management page for further details.
#+END_ASCII
**** code
#+NAME: kraken-create-order
#+HEADER: :results drawer value
#+BEGIN_SRC ipython
  import krakenex
  from pykrakenapi import KrakenAPI
  from trading.kraken import credentials
  creds_dict = credentials()
  api = krakenex.API(creds_dict['APIKEY'],
                     creds_dict['PRIVATEKEY'])
  k = KrakenAPI(api)
  k.add_standard_order("XXMRZEUR", 'buy', 'market', "1")
#+END_SRC

#+RESULTS: kraken-create-order
:RESULTS:
# Out[11]:
: {'descr': {'order': 'buy 1.00000000 XMREUR @ market'}}
:END:

#+RESULTS:
: # Out[1]:

*** OHLC

**** Save latest ohlc data
#+NAME: latest-kraken-ohlc-file-persist-snapshot
#+HEADER: :results drawer raw output replace
#+HEADER: :exports both
#+BEGIN_SRC ipython
  from trading.kraken import ohlc
  from trading.sql import connect
  import tempfile

  with tempfile.NamedTemporaryFile(prefix='pickle', delete=False) as f:
      db = connect('sqlite:///' + f.name)
      ohlc(**db)
      print(f.name)
#+END_SRC

#+RESULTS: latest-kraken-ohlc-file-persist-snapshot
attempt: 000 | ['EService:Unavailable']
/tmp/pickle1cynlrgb
/tmp/pickle9ahgr6eq
/tmp/picklezjsr03ms

**** Import ohlc snapshot

#+NAME: add-latest-kraken-snapshot-ohcl-to-project
#+HEADER: :results raw drawer replace output
#+BEGIN_SRC sh :var tmp_data_file=latest-kraken-ohlc-file-persist-snapshot
project_data_file=data/ohcl-`date +%F-%H:%M:%S`.sqlite
mv ${tmp_data_file} ${project_data_file}
git add ${project_data_file}
git commit -m"New data added ${project_data_file}"
git push
#+END_SRC

#+RESULTS: add-latest-kraken-snapshot-ohcl-to-project
:RESULTS:
[master ef960fc] New data added data/ohcl-2018-09-30-19:54:51.sqlite
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 data/ohcl-2018-09-30-19:54:51.sqlite
:END:

#+RESULTS: add-latest-kraken-ohcl-to-project
:RESULTS:
[master 026fcdc] New data added data/ohcl-2018-08-22-21:11:04.sqlite
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 data/ohcl-2018-08-22-21:11:04.sqlite
:END:


**** import latest ohlc data
#+NAME: import-latest-kraken-ohlc-file
#+BEGIN_SRC sh :var ohlc_data_file=latest-kraken-ohlc-file
  echo "$ohlc_data_file" | awk '{print $1}'
  # cat ${ohcl_data_file} > data/ohcl-`date +%F-%H-%M-%S`.sqlite
#+END_SRC

#+RESULTS: import-latest-kraken-ohlc-file
: /tmp/pickleobbx203j

**** Stuff
#+name localvenv
#+BEGIN_SRC emacs-lisp
(progn (pipenv-activate) (pyvenv-activate python-shell-virtualenv-root) "")
#+END_SRC

#+RESULTS:

#+header: :results value drawer
#+begin_src python
  from trading.kraken import ohlc
  ohlc()
#+end_src

#+RESULTS:
:RESULTS:
None
:END:

*** Balance
**** Balance panda
#+NAME: get-kraken-balance
#+HEADER: :results drawer value
#+BEGIN_SRC ipython
  from trading.kraken import connect, to_sql
  from trading.sql import memdb, meta
  from sqlalchemy.sql import select
  k = connect()
  balance_panda = k.get_account_balance()
  balance_panda.loc['ZEUR']['vol']
#+END_SRC

#+RESULTS: get-kraken-balance
:RESULTS:
# Out[26]:
: 2025.4876
:END:

**** Currency balance
#+NAME: currency-balance
#+BEGIN_SRC ipython
  from trading.kraken import get_currency_balance
  get_currency_balance()

#+END_SRC

#+RESULTS:
: # Out[2]:
: : 2025.4876

** Strategy

*** Order log

**** Schema
#+NAME: create-orderlog-table
#+BEGIN_SRC ipython :tangle yes
  from sqlalchemy import MetaData, create_engine, Table, Column
  from sqlalchemy.types import DateTime, Integer, String, Float
  from sqlalchemy.sql import func
  from os.path import expanduser, exists, join
  from os import makedirs

  data_dir = expanduser('~/.local/lib/trading/data')
  if not exists(data_dir):
      makedirs(data_dir)
  engine = create_engine('sqlite:///' + join(data_dir, 'orderlog.sqlite'))

  metadata = MetaData()

  orderlog_table = Table('orderlog', metadata,
                         Column('id', Integer, primary_key=True),
                         Column('currency', String, nullable=False),
                         Column('amount', String, nullable=False),
                         Column('datetime', DateTime,
                                nullable=False,
                                server_default=func.now()))

  orderlog_table.create(engine)
#+END_SRC

#+RESULTS: create-orderlog-table
: # Out[4]:

**** Schema less (pickle)
Store pickled data in a topic on a append log
#+NAME: create-orderlog-table-as-pickle
#+HEADER: :tangle src/trading/storage.py
#+BEGIN_SRC ipython
  from sqlalchemy import MetaData, Table, Column, desc
  from sqlalchemy.types import DateTime, Integer, PickleType
  from sqlalchemy.sql import func, select
  from os.path import expanduser, exists, dirname
  from os import makedirs
  from trading.sql import connect
  import pickle
  import logging


  def save(topic, data, **kwargs):
      connection, topic_table = get_table(topic)
      logging.warn(topic_table)
      connection.execute(topic_table.insert().values(payload=pickle.dumps(data)))


  def load(topic):
      connection, topic_table = get_table(topic)
      query = select([topic_table]).order_by(desc(topic_table.c['id']))
      message = connection.execute(query).fetchone()
      if message:
          message = pickle.loads(message['payload'])
      return message


  def get_pickle_log_db():
      db_path = expanduser('~/.local/lib/trading/data/state.sqlite')
      db_dir = dirname(db_path)

      if not exists(db_dir):
          makedirs(db_dir)

      return connect('sqlite:///' + db_path)


  def get_pickle_log_table_def(table_name, *, connection, **kwargs):
      metadata = MetaData()
      metadata.reflect(bind=connection)
      return metadata.tables[table_name]


  def get_table(table_name):
      db_path = expanduser('~/.local/lib/trading/data/state.sqlite')
      db_dir = dirname(db_path)

      if not exists(db_dir):
          makedirs(db_dir)

      db = connect('sqlite:///' + db_path)

      metadata = MetaData()
      metadata.reflect(bind=db['connection'])

      if not db['connection'].dialect.has_table(db['connection'], table_name):
          orderlog_table = Table(table_name, metadata,
                                 Column('id', Integer, primary_key=True),
                                 Column('payload', PickleType, nullable=False),
                                 Column('datetime', DateTime,
                                        server_default=func.now()))
          orderlog_table.create(db['connection'])
      else:
          orderlog_table = metadata.tables[table_name]

      return db['connection'], orderlog_table

#+END_SRC

#+RESULTS: create-orderlog-table-as-pickle
: # Out[10]:

***** Test
#+NAME: test-pickle-state
#+BEGIN_SRC ipython :tangle tests/trading/test_storage.py
  import pytest
  from trading.storage import save, load
  import logging

  @pytest.mark.storage
  def test_storage(caplog):
      balance_in1 = {'euros': 1,
                     'xmr': 1}
      balance_in2 = {'euros': 2,
                     'xmr': 2}
      balance_in3 = {'euros': 3,
                     'xmr': 3}
      with caplog.at_level(logging.DEBUG):
          save('balance', balance_in1)
          save('balance', balance_in2)
          save('balance', balance_in3)
          balance_out = load('balance')
      assert balance_in3 == balance_out
#+END_SRC


#+NAME: test-mark-python
#+BEGIN_SRC ipython :session storage
  import pytest
  pytest.main(["-m", "storage"])
#+END_SRC

#+RESULTS: test-mark-python
: # Out[2]:
: : 1

#+NAME: reload-storage
#+BEGIN_SRC ipython :session storage
  from importlib import reload
  import trading.storage
  reload(trading.storage)
#+END_SRC

#+RESULTS: reload-storage
: # Out[1]:
: : <module 'trading.storage' from '/home/kristian/projects/trading/src/trading/storage.py'>

*** default strategy

**** Simple use case
#+NAME: simple-strategy-use-case
#+HEADER: :results raw drawer
#+HEADER: :session
#+BEGIN_SRC ipython
  from trading.kraken import table_mapping, ohlc_table
  from trading.sql import connect, meta, window_query, execute, time_range
  from trading.strategy.simple import create
  from trading.core import TradeCommand
  from os.path import join as join_path

  db = connect("sqlite:///" + join_path('/home/kristian/projects/trading/data',
                                        'ohlc-2018-08-19-23:32:55.sqlite'))

  ohlc = {**db,
          ,**table_mapping[ohlc_table],
          ,**{"table_object": meta(**db).tables[ohlc_table]}}

  offset = 3600
  window_size = 3600 * 5
  start, end = time_range(**ohlc)
  begin = start + offset

  query = window_query(**{**{"start": begin,
                             "end": begin + window_size},
                          ,**ohlc})

  data = execute(query=query, connection=db['connection'])
  engine, events = create(lambda: 0,
                          {TradeCommand.buy: lambda analysis: print("BUY!!"),
                           TradeCommand.sell: lambda analysis: print("SELL!!")})
  engine(data, **ohlc)
#+END_SRC
**** Plot
#+NAME: plot-simple-strategy
#+HEADER: :results raw drawer
#+HEADER: :session
#+BEGIN_SRC ipython :var sqlfile=ask-for-datafile
  %matplotlib inline
  import warnings
  warnings.filterwarnings("ignore", message="numpy.dtype size changed")
  from trading.plot import axis_with_dates_x
  from trading.core import default_kraken_strategy
  from trading.sql import sqlite_connect
  from datetime import datetime

  fig, ax = axis_with_dates_x()
  fig.patch.set_facecolor('white')


  def plot(analysis):
      ax.plot([datetime.fromtimestamp(x) for x in analysis['x']], analysis['y'])
      ax.plot([datetime.fromtimestamp(x) for x in analysis['xfit']], analysis['yfit'])
      # ax.plot([datetime.fromtimestamp(x) for x in analysis['xpeak']], analysis['ypeak'], 'b+')
      ax.axvline(x=datetime.fromtimestamp(analysis['xpeak'][0]), color='#ff0000')

  db = sqlite_connect(sqlfile)

  strategy, events = default_kraken_strategy(buy_fn=plot,
                                             sell_fn=plot,
                                             latest_order_epoc_fn=lambda: 0)
  strategy(db, offset=(3600 * 1)+600)
#+END_SRC

#+RESULTS: plot-simple-strategy
:RESULTS:
# Out[6]:
[[file:./obipy-resources/109671yv.png]]
:END:
**** Animate default strategy
#+NAME: animate-default-strategy
#+HEADER: :results raw drawer
#+HEADER: :tangle animate-default-strategy.py
#+HEADER: :session animate-default-strategy
#+BEGIN_SRC python :var sqlfile=ask-for-datafile
  from trading.data import window_generator, TradeCommand, extract
  from trading.plot import axis_with_dates_x, update_plot_with_fit_and_peak
  from trading.plot import init_with_fit_and_peak
  from functools import partial
  from trading.strategy.simple import create_strategy
  from trading.sql import sqlite_connect
  from dev.order import simulation
  from time import sleep
  from datetime import datetime

  fig, ax = axis_with_dates_x()
  fig.patch.set_facecolor('white')

  plots = {}
  init_with_fit_and_peak(plots, ax)

  db = sqlite_connect(sqlfile)

  plotter = partial(update_plot_with_fit_and_peak, plots, ax)


  def throw(message):
      raise Exception(message)

  tradeCommands = {
      TradeCommand.sell: plotter,
      TradeCommand.buy: plotter
  }

  sim = simulation()

  strategy, events = create_strategy(sim.get_latest_order_epoc, tradeCommands)
  sim.trade_on_peak(events)
  for data in window_generator(3600 * 5, 600, **db):
      x, y = extract(data)
      xd = [datetime.fromtimestamp(x_) for x_ in x]
      ax.set_xlim(min(xd), max(xd))
      ax.set_ylim(min(y), max(y))
      plots['ticks'].set_data(xd, y)
      fig.canvas.draw()
      fig.canvas.flush_events()
      strategy(data)
#+END_SRC

#+RESULTS: animate-default-strategy
:RESULTS:
(<matplotlib.lines.Line2D object at 0x7f9a7dbd5710>, <matplotlib.lines.Line2D object at 0x7f9a7db9e3c8>, <matplotlib.lines.Line2D object at 0x7f9a7db1c208>)
:END:

#+NAME: execute-animate-default-strategy
#+CALL: execute-python-script(script="animate-default-strategy.py")

#+RESULTS: execute-animate-default-strategy
:RESULTS:
:END:

#+RESULTS:
:RESULTS:
:END:
#+NAME: s-curve
#+HEADER: :results drawer
#+HEADER: :tangle s_curve.py
#+BEGIN_SRC python :var sqlfile=ask-for-datafile
  from trading.plot import axis_with_dates_x
  from trading.sql import sqlite_connect
  from datetime import datetime
  from trading.data import window_generator, extract
  from trading.ui import create_gui_window, update_ui
  from functools import partial

  ui_window = create_gui_window()
  update_window = partial(update_ui, ui_window)
  fig, ax = axis_with_dates_x()
  fig.patch.set_facecolor('white')

  db = sqlite_connect(sqlfile)

  for data in window_generator(3600 * 5, 600, **db):
      x, y = extract(data)
      xd = [datetime.fromtimestamp(x_) for x_ in x]
      ax.clear()
      ax.set_xlim(min(xd), max(xd))
      ax.set_ylim(min(y), max(y))
      ax.plot(xd, y)
      fig.canvas.draw()
      fig.canvas.flush_events()
      update_window()
#+END_SRC

#+RESULTS: s-curve
:RESULTS:
:END:

**** Store on order
#+NAME: store-on-order
#+HEADER: :results raw drawer
#+HEADER: :session
#+BEGIN_SRC ipython
  # %matplotlib inline
  import warnings
  warnings.filterwarnings("ignore", message="numpy.dtype size changed")
  from trading.plot import axis_with_dates_x
  from trading.core import default_kraken_strategy
  from trading.sql import sqlite_connect
  from trading.events import TradingEvents, bind
  from datetime import datetime
  import pickle

  from os.path import expanduser, exists, dirname
  from os import makedirs


  fig, ax = axis_with_dates_x()


  def plot(analysis):
      ax.plot([datetime.fromtimestamp(x) for x in analysis['x']], analysis['y'])
      ax.plot([datetime.fromtimestamp(x) for x in analysis['xfit']], analysis['yfit'])
      ax.plot([datetime.fromtimestamp(x) for x in analysis['xpeak']], analysis['ypeak'], 'b+')


  db = sqlite_connect('/home/kristian/projects/trading/data/ohlc-2018-08-19-23:32:55.sqlite')

  strategy, events = default_kraken_strategy(buy_fn=plot,
                                             sell_fn=plot,
                                             latest_order_epoc_fn=lambda: 0)


  def store_data(data):
      date = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
      data_path = expanduser('~/.local/lib/trading/data/order-data-' + date + '.sqlite')
      with open(data_path, 'wb') as f:
          pickle.dump(data, f)


  bind(TradingEvents.data.fget(events), lambda data: store_data(data['data']))
  strategy(db, direction="head", offset=1800)
#+END_SRC

#+RESULTS: store-on-order
:RESULTS:
# Out[119]:
[[file:./obipy-resources/321554aB.png]]
:END:

**** test
#+NAME: test-default-kraken-strategy
#+HEADER: :tangle tests/trading/test_default_strategy.py
#+BEGIN_SRC ipython
  from strategy_helper import bindings_for_default_kraken_strategy
  import pytest
  import logging


  @pytest.mark.default_strategy
  def test_default_strategy(ohlc_12_hour_as_sql, caplog):
      [strategy,
       events] = bindings_for_default_kraken_strategy(1534104841.0428, 3600 * 4)
      with caplog.at_level(logging.DEBUG):
          strategy(ohlc_12_hour_as_sql)

      assert "buy ~~~" in caplog.text
      assert "sell ~~~" not in caplog.text

#+END_SRC

***** Execute
#+NAME: test-default-kraken-strategy-execute
#+call: pytest-mark(mark="default_strategy", debug="-vv")

#+RESULTS: test-default-kraken-strategy-execute
=
> > kristian@debian-x200:~/projects/trading$ > > > kristian@debian-x200:~/projects/trading$ kristian@debian-x200:~/projects/trading$ ==================================================================== test session starts ====================================================================
platform linux -- Python 3.5.3, pytest-3.6.3, py-1.5.4, pluggy-0.6.0 -- /home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/bin/python3.5m
cachedir: .pytest_cache
rootdir: /home/kristian/projects/trading, inifile:
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
collecting 0 items                                                                                                                                          collecting 1 item                                                                                                                                           collecting 2 items                                                                                                                                          collecting 16 items                                                                                                                                         collecting 17 items                                                                                                                                         collecting 18 items                                                                                                                                         collecting 21 items                                                                                                                                         collecting 22 items                                                                                                                                         collecting 24 items                                                                                                                                         collecting 26 items                                                                                                                                         collecting 27 items                                                                                                                                         collecting 29 items                                                                                                                                         collecting 30 items                                                                                                                                         collecting 31 items                                                                                                                                         collecting 32 items                                                                                                                                         collecting 33 items                                                                                                                                         collecting 34 items                                                                                                                                         collecting 35 items                                                                                                                                         collecting 36 items                                                                                                                                         collecting 37 items                                                                                                                                         collecting 38 items                                                                                                                                         collecting 40 items                                                                                                                                         collected 40 items / 39 deselected
]

========================================================== 1 passed, 39 deselected in 4.44 seconds ==========================================================
==
> > kristian@debian-x200:~/projects/trading$ > > > kristian@debian-x200:~/projects/trading$ kristian@debian-x200:~/projects/trading$ ==================================================================== test session starts ====================================================================
platform linux -- Python 3.5.3, pytest-3.6.3, py-1.5.4, pluggy-0.6.0 -- /home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/bin/python3.5m
cachedir: .pytest_cache
rootdir: /home/kristian/projects/trading, inifile:
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
collecting 0 items                                                                                                                                          collecting 1 item                                                                                                                                           collecting 2 items                                                                                                                                          collecting 16 items                                                                                                                                         collecting 17 items                                                                                                                                         collecting 18 items                                                                                                                                         collecting 21 items                                                                                                                                         collecting 22 items                                                                                                                                         collecting 24 items                                                                                                                                         collecting 26 items                                                                                                                                         collecting 27 items                                                                                                                                         collecting 29 items                                                                                                                                         collecting 30 items                                                                                                                                         collecting 31 items                                                                                                                                         collecting 32 items                                                                                                                                         collecting 33 items                                                                                                                                         collecting 34 items                                                                                                                                         collecting 35 items                                                                                                                                         collecting 36 items                                                                                                                                         collecting 37 items                                                                                                                                         collecting 38 items                                                                                                                                         collecting 40 items                                                                                                                                         collected 40 items / 39 deselected
]

========================================================================= FAILURES ==========================================================================
___________________________________________________________________ test_default_strategy ___________________________________________________________________
@pytest.mark.default_strategy_store
    def test_default_strategy(caplog):
        def save_data(tmp_db_file):
            data_dir = expanduser('~/.local/lib/trading/data/orders')
            os.makedirs(data_dir)
            stored_date_file = join(data_dir, "date_data.sqlite")
            copyfile(tmp_db_file, stored_date_file)

        [strategy,
         events] = bindings_for_default_kraken_strategy(1534104841.0428, 3600 * 4)
        with caplog.at_level(logging.DEBUG):
            with tempfile.NamedTemporaryFile(prefix='pickle') as f:
                bind(TradingEvents.tradeAdvise.fget(events), save_data)
                db = connect('sqlite:///' + f.name)
strategy(db)

tests/trading/test_default_strategy_store.py:27:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/trading/core.py:27: in strategy
    start, end = time_range(**db)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cur = None, time_column = 'time', table = 'ohlc'
}
, meta_data = MetaData(bind=None)

    def time_range(cur=None, time_column='time', table='ohlc', **kwargs):
        if 'connection' not in kwargs:
            cur.execute("SELECT min({}) FROM {}".format(time_column, table))
            start = int(cur.fetchall()[0][0])
            cur.execute("SELECT max({}) FROM {}".format(time_column, table))
            end = int(cur.fetchall()[0][0])
        else:
            session = kwargs['session']
            meta_data = meta(kwargs['connection'])
orders_tables = meta_data.tables[table]
E           KeyError: 'ohlc'

src/trading/sql.py:62: KeyError
========================================================== 1 failed, 39 deselected in 3.40 seconds ==========================================================
==
> > kristian@debian-x200:~/projects/trading$ > > > kristian@debian-x200:~/projects/trading$ kristian@debian-x200:~/projects/trading$ ==================================================================== test session starts ====================================================================
platform linux -- Python 3.5.3, pytest-3.6.3, py-1.5.4, pluggy-0.6.0 -- /home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/bin/python3.5m
cachedir: .pytest_cache
rootdir: /home/kristian/projects/trading, inifile:
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
collecting 0 items                                                                                                                                          collecting 1 item                                                                                                                                           collecting 2 items                                                                                                                                          collecting 16 items                                                                                                                                         collecting 17 items                                                                                                                                         collecting 20 items                                                                                                                                         collecting 21 items                                                                                                                                         collecting 23 items                                                                                                                                         collecting 25 items                                                                                                                                         collecting 26 items                                                                                                                                         collecting 28 items                                                                                                                                         collecting 29 items                                                                                                                                         collecting 30 items                                                                                                                                         collecting 31 items                                                                                                                                         collecting 32 items                                                                                                                                         collecting 33 items                                                                                                                                         collecting 34 items                                                                                                                                         collecting 35 items                                                                                                                                         collecting 36 items                                                                                                                                         collecting 37 items                                                                                                                                         collecting 39 items                                                                                                                                         collected 39 items / 39 deselected

=============================================================== 39 deselected in 3.01 seconds ===============================================================
==
> > kristian@debian-x200:~/projects/trading$ > > > kristian@debian-x200:~/projects/trading$ kristian@debian-x200:~/projects/trading$ ==================================================================== test session starts ====================================================================
platform linux -- Python 3.5.3, pytest-3.6.3, py-1.5.4, pluggy-0.6.0 -- /home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/bin/python3.5m
cachedir: .pytest_cache
rootdir: /home/kristian/projects/trading, inifile:
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
collecting 0 items                                                                                                                                          collecting 1 item                                                                                                                                           collecting 2 items                                                                                                                                          collecting 16 items                                                                                                                                         collecting 17 items                                                                                                                                         collecting 20 items                                                                                                                                         collecting 21 items                                                                                                                                         collecting 23 items                                                                                                                                         collecting 25 items                                                                                                                                         collecting 26 items                                                                                                                                         collecting 28 items                                                                                                                                         collecting 29 items                                                                                                                                         collecting 30 items                                                                                                                                         collecting 31 items                                                                                                                                         collecting 32 items                                                                                                                                         collecting 33 items                                                                                                                                         collecting 34 items                                                                                                                                         collecting 35 items                                                                                                                                         collecting 36 items                                                                                                                                         collecting 37 items                                                                                                                                         collecting 39 items                                                                                                                                         collected 39 items / 39 deselected

=============================================================== 39 deselected in 3.05 seconds ===============================================================
=***** Fixture
#+NAME: test-default-strategy-fixture
#+HEADER: :session fixtures
#+BEGIN_SRC ipython









  @pytest.fixture
  def ohlc_12_hour_as_sql():
      db = connect("sqlite:///" + join('/home/kristian/projects/trading/data',
                                         'ohlc-2018-08-19-23:32:55.sqlite'))
      # db['time_column'] = 'timestamp'
      return db


#+END_SRC

**** Store temp db when trading
#+NAME: store-temp-db-when-trading
#+HEADER: :tangle tests/trading/test_default_strategy_store.py
#+BEGIN_SRC ipython
  from strategy_helper import bindings_for_default_kraken_strategy
  from trading.events import TradingEvents, bind
  from trading.kraken import ohlc
  from trading.sql import connect
  from os.path import expanduser, join
  import os
  from shutil import copyfile
  import pytest
  import tempfile
  import logging


  @pytest.mark.default_strategy_store
  def test_default_strategy(caplog):
      def save_data(tmp_db_file):
          data_dir = expanduser('~/.local/lib/trading/data/orders')
          os.makedirs(data_dir)
          stored_date_file = join(data_dir, "date_data.sqlite")
          copyfile(tmp_db_file, stored_date_file)
          raise Exception("Hest")

      [strategy,
       events] = bindings_for_default_kraken_strategy(1534104841.0428, 3600 * 4)
      with caplog.at_level(logging.DEBUG):
          with tempfile.NamedTemporaryFile(prefix='pickle') as f:
              bind(TradingEvents.tradeAdvise.fget(events), save_data)
              db = connect('sqlite:///' + f.name)
              ohlc(**db)
              strategy(db)
      assert "buy ~~~" in caplog.text

#+END_SRC

***** Execute
#+NAME: test-default-kraken-strategy-execute
#+call: pytest-mark(mark="default_strategy_store", debug="-vv")

*** Save all data on order

*** Calculate amount
#+NAME simple-strategy-calculate-amount
#+BEGIN_SRC ipython

#+END_SRC
** Working with data
#+NAME: ask-for-datafile
#+BEGIN_SRC emacs-lisp
  (read-file-name "Enter file name:")
#+END_SRC

#+RESULTS[d26d882457825d57211a1c7e3d54c7ef7f899250]: ask-for-datafile
: /home/kristian/projects/trading/data/ohcl-2018-09-11-23:47:24.sqlite


** Plot

*** Plot orders
#+NAME: plot-orders
#+HEADER: :session
#+HEADER: :ipyfile /tmp/image.png
#+HEADER: :results raw drawer
#+BEGIN_SRC ipython :var data_file=ask-for-datafile
  %matplotlib inline
  import warnings
  warnings.filterwarnings("ignore", message="numpy.dtype size changed")
  warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
  from trading.sql import connect, window, time_range
  from trading.data import extract
  from trading.plot import axis_with_dates_x, as_dates
  from trading.kraken import get_orders_between
  import matplotlib.patches as mpatches
  import matplotlib.pyplot as plt
  from datetime import datetime



  connect_str = "sqlite:///" + data_file
  db = connect(connect_str)
  start, end = time_range(**db)
  orders = get_orders_between(start, end)
  result = extract(window(None, start, end, **db))
  fig, ax = axis_with_dates_x()
  fig.patch.set_facecolor('white')
  ax.plot(as_dates(result[0]), result[1])
  red_patch = mpatches.Patch(color='red', label='Buy')
  green_patch = mpatches.Patch(color='green', label='Sell')
  fig.legend(handles=[red_patch, green_patch])
  for idx, order in orders.iterrows():
      colors = {'buy': '#ff0000',
                'sell': '#00ff00'}
      ax.axvline(x=datetime.fromtimestamp(order['time']),
                 color=colors[order['type']])
  plt.show()
#+END_SRC

#+RESULTS: plot-orders
:RESULTS:
# Out[3]:
[[file:/tmp/image.png]]
:END:

#+RESULTS: plot-data
:RESULTS:
# Out[2]:
[[file:/tmp/image.png]]
:END:

*** Plot latest 12 hours
#+NAME: plot-latest-orders-12-hours
#+HEADER: :results raw drawer
#+BEGIN_SRC ipython
  %matplotlib inline
  import warnings
  warnings.filterwarnings("ignore", message="numpy.dtype size changed")
  warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
  from trading.sql import connect, window, time_range, memdb
  from trading.data import extract
  from trading.plot import axis_with_dates_x, as_dates
  from trading.kraken import get_orders_between, ohlc
  import matplotlib.patches as mpatches
  import matplotlib.pyplot as plt
  from datetime import datetime


  db = memdb()
  ohlc(**db)
  start, end = time_range(**db)
  orders = get_orders_between(start, end)
  result = extract(window(None, start, end, **db))
  fig, ax = axis_with_dates_x()
  fig.patch.set_facecolor('white')
  ax.plot(as_dates(result[0]), result[1])
  red_patch = mpatches.Patch(color='red', label='Buy')
  green_patch = mpatches.Patch(color='green', label='Sell')
  fig.legend(handles=[red_patch, green_patch])
  for idx, order in orders.iterrows():
      colors = {'buy': '#ff0000',
                'sell': '#00ff00'}
      ax.axvline(x=datetime.fromtimestamp(order['time']),
                 color=colors[order['type']])
  plt.show()
#+END_SRC

#+RESULTS: plot-latest-orders-12-hours
:RESULTS:
# Out[1]:
[[file:./obipy-resources/1622MY1.png]]
:END:

#+RESULTS: plot-latest-orders
:RESULTS:
# Out[2]:
[[file:./obipy-resources/9161Zj2.png]]
:END:

*** Get orders since
#+NAME: orders-since
#+HEADER: :session getorders_between
#+BEGIN_SRC ipython
  from trading.kraken import get_orders_between
  get_orders_between(1534900208.0, 1535004000.0)


#+END_SRC

#+RESULTS: orders-since
=# Out[1]:
: [1534921809.8653, 1534915207.0475, 1534906208.7583, 1534900208.2574]
==# Out[65]:
: [1534921809.8653, 1534915207.0475, 1534906208.7583, 1534900208.2574]
==# Out[64]:
: [1534921809.8653, 1534915207.0475, 1534906208.7583, 1534900208.2574]
==# Out[63]:
: [1534921809.8653, 1534915207.0475, 1534906208.7583, 1534900208.2574]
==# Out[62]:
#+BEGIN_EXAMPLE
  txid        cost       fee  \
  dtime
  2018-08-22 07:10:09.865299940  TAFMOI-FQIQ7-ZQQJ5R  416.490800  1.082876
  2018-08-22 05:20:07.047499895  TBTJKI-OLGAH-EY4ZR6  417.500000  1.085500
  2018-08-22 02:50:08.758300066  TEVRKX-3GHFU-NWKIV6  416.817200  1.083725
  2018-08-22 01:10:08.257400036  TTHXT6-JDFH4-CRP42K  421.561047  1.096059

  margin misc            ordertxid ordertype  \
  dtime
  2018-08-22 07:10:09.865299940     0.0       O5UW3M-BITQT-MKERVJ    market
  2018-08-22 05:20:07.047499895     0.0       ORPB2S-IOPBN-A4Y3KK    market
  2018-08-22 02:50:08.758300066     0.0       O5Q4BI-F5O7Q-A4VDZX    market
  2018-08-22 01:10:08.257400036     0.0       OLZ72Y-KYW3J-73WFVN    market

  pair              postxid      price  \
  dtime
  2018-08-22 07:10:09.865299940  XXMRZEUR  TKH2SE-M7IF5-CFI7LT  83.298160
  2018-08-22 05:20:07.047499895  XXMRZEUR  TKH2SE-M7IF5-CFI7LT  83.500000
  2018-08-22 02:50:08.758300066  XXMRZEUR  TKH2SE-M7IF5-CFI7LT  83.363440
  2018-08-22 01:10:08.257400036  XXMRZEUR  TKH2SE-M7IF5-CFI7LT  84.312209

  time  type  vol
  dtime
  2018-08-22 07:10:09.865299940  1.534922e+09   buy  5.0
  2018-08-22 05:20:07.047499895  1.534915e+09  sell  5.0
  2018-08-22 02:50:08.758300066  1.534906e+09  sell  5.0
  2018-08-22 01:10:08.257400036  1.534900e+09   buy  5.0
#+END_EXAMPLE
==# Out[61]:
#+BEGIN_EXAMPLE
  [True,
  True,
  True,
  True,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False,
  False]
#+END_EXAMPLE
==# Out[60]:
#+BEGIN_EXAMPLE
  dtime
  2018-08-22 07:10:09.865299940     True
  2018-08-22 05:20:07.047499895     True
  2018-08-22 02:50:08.758300066     True
  2018-08-22 01:10:08.257400036     True
  2018-08-21 22:13:56.589999914    False
  2018-08-21 21:01:14.413800001    False
  2018-08-21 20:50:08.210500002    False
  2018-08-21 20:40:08.750000000    False
  2018-08-21 20:30:09.526499987    False
  2018-08-21 20:10:08.626399994    False
  2018-08-21 17:40:09.948600054    False
  2018-08-21 15:51:24.601500034    False
  2018-08-12 20:14:01.042799950    False
  2018-05-09 13:42:44.981699944    False
  2018-05-09 13:01:43.938199997    False
  2018-02-12 21:44:23.231699944    False
  2017-12-06 07:45:56.501699923    False
  2017-12-06 07:45:56.492000103    False
  2017-12-06 07:45:56.482100010    False
  2017-12-05 23:40:25.703299999    False
  2017-12-05 23:40:25.693399906    False
  2017-07-01 11:22:26.989799976    False
  2017-07-01 11:22:26.967999935    False
  Name: time, dtype: bool
#+END_EXAMPLE
==# Out[43]:
: [1534921809.8653, 1534915207.0475, 1534906208.7583, 1534900208.2574]
=#+end_example
*** Animation
**** Save animation
#+NAME: save-animate-data
#+HEADER: :session
#+HEADER: :results raw drawer replace
#+HEADER: :var data_file="/home/kristian/projects/trading/data/ohlc-2018-08-19-23:32:55.sqlite"
#+BEGIN_SRC ipython
  import warnings
  warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
  from trading.data import window_generator
  from trading.sql import connect
  from trading.octave import conf as peakConf
  from functools import partial
  from trading.data import analyseData
  import matplotlib.animation as animation

  from trading.plot import create_plot_with_fit_and_peak

  db = connect("sqlite:///" + data_file)

  analysis_fn = partial(analyseData,
                        peakConf)

  fig, ax, ani = create_plot_with_fit_and_peak(analysis_fn,
                                               window_generator(3600 * 3,
                                                                600,
                                                                ,**db))
  Writer = animation.writers['ffmpeg']
  writer = Writer(fps=1, metadata=dict(artist='Me'), bitrate=1800)
  ani.save('im.mp4', writer=writer)
#+END_SRC

#+RESULTS: save-animate-data
:RESULTS:
# Out[5]:
[[file:./obipy-resources/168743W2.png]]
:END:

#+RESULTS: animate-data
:RESULTS:
# Out[3]:
[[file:./obipy-resources/16874O9J.png]]
:END:

** Test

*** Test mark
#+NAME: pytest-mark
#+HEADER: :session test-profit
#+HEADER: :results drawer replace
#+BEGIN_SRC sh :var mark="default_strategy_store" debug=""
  export PIPENV_IGNORE_VIRTUALENVS=1
  pipenv run pytest -m ${mark} ${debug}
#+END_SRC

#+RESULTS: pytest-mark
:RESULTS:

> > kristian@debian-x200:~/projects/trading$ > > > kristian@debian-x200:~/projects/trading$ kristian@debian-x200:~/projects/trading$ ==================================================================== test session starts ====================================================================
platform linux -- Python 3.5.3, pytest-3.6.3, py-1.5.4, pluggy-0.6.0
rootdir: /home/kristian/projects/trading, inifile:
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
collecting 0 items                                                                                                                                          collecting 1 item                                                                                                                                           collecting 2 items                                                                                                                                          collecting 16 items                                                                                                                                         collecting 17 items                                                                                                                                         collecting 18 items                                                                                                                                         collecting 21 items                                                                                                                                         collecting 22 items                                                                                                                                         collecting 24 items                                                                                                                                         collecting 26 items                                                                                                                                         collecting 27 items                                                                                                                                         collecting 29 items                                                                                                                                         collecting 30 items                                                                                                                                         collecting 31 items                                                                                                                                         collecting 32 items                                                                                                                                         collecting 33 items                                                                                                                                         collecting 34 items                                                                                                                                         collecting 35 items                                                                                                                                         collecting 36 items                                                                                                                                         collecting 37 items                                                                                                                                         collecting 38 items                                                                                                                                         collecting 40 items                                                                                                                                         collected 40 items / 39 deselected
]

========================================================== 1 passed, 39 deselected in 4.82 seconds ==========================================================
:END:

*** Fixtures
#+NAME: fixtures-head
#+HEADER: :session fixtures
#+BEGIN_SRC ipython
  import pytest
  from os import getcwd
  from os.path import join, dirname
  from sys import path
  from trading.data import load_data_from_file
  from trading.sql import connect, meta, latest
  from trading.kraken import to_sql

  try:
      path.append(join(dirname(__file__), 'helpers'))
  except NameError:
      pass

  @pytest.fixture
  def low_peak():
      path = join(getcwd(), 'data', 'low_pickle.byte')
      return load_data_from_file(path)


  @pytest.fixture
  def high_peak():
      path = join(getcwd(), 'data', 'high_pickle.byte')
      return load_data_from_file(path)


  @pytest.fixture
  def latest_order():
      path = join(getcwd(), 'data', 'orders.sqlite')
      orders = load_data_from_file(path)
      db = connect('sqlite://')
      to_sql(orders, 'ohlc', **db)
      db['meta_data'] = meta(db['connection'])
      return latest(**db)


  @pytest.fixture
  def high_peak_order_epoc(high_peak):
      return high_peak['result']['xpeak'][0] + 1800


  @pytest.fixture
  def low_peak_order_epoc(low_peak):
      return low_peak['result']['xpeak'][0] + 1800

  @pytest.fixture
  def all_data():
      db = connect("sqlite:///" + join('/home/kristian/projects/trading/data',
                                         'ohlc-2018-08-19-23:32:55.sqlite'))
      # db['time_column'] = 'timestamp'
      return db


#+END_SRC

#+RESULTS: fixures-head
: # Out[2]:

**** all
#+NAME: fixtures-all
#+HEADER: :tangle tests/trading/conftest.py
#+HEADER: :noweb yes
#+BEGIN_SRC ipython
<<fixtures-head>>
<<test-default-strategy-fixture>>
#+END_SRC

** Script
#+NAME: execute-python-script
#+HEADER: :results drawer
#+BEGIN_SRC sh :var script=""
pipenv run python $script
#+END_SRC
** Tempfile
#+NAME: create-temp-file
#+BEGIN_SRC sh :var prefix=""
  mktemp /tmp/${prefix}.XXXXXXX
#+END_SRC

#+RESULTS: create-temp-file
: /tmp/.84VIdrd

*** test
#+CALL: create-temp-file(prefix="test-create-temp-file")

#+RESULTS:
: /tmp/test-create-temp-file.ILKvCVA

** Test profit
*** Profit
#+NAME: test-profit
#+HEADER: :session test-profit
#+HEADER: :tangle tests/trading/test_profit_persist.py
#+BEGIN_SRC ipython :session profit
  from trading.core import TradeCommand
  from trading.data import window_generator
  from trading.util import toDate
  from trading.storage import save, load
  from strategy_helper import take
  import pytest
  import logging


  @pytest.mark.profit_persist
  def test_profit(all_data, caplog):
      newMoney = 0
      euros = 0
      xmrs = 0
      rate = -1

      topic = "trading"
      state = load(topic)
      if not state:
          state = {}
          firstOrder = True


      def sell(analysis):
          nonlocal euros, xmrs, rate, firstOrder, newMoney, state
          rate = analysis['y'][-1]
          if firstOrder:
              firstOrder = False
              logging.warn("Selling on first order")
              newMonero = 5
              xmrs = 5
              euros = 0

              state['newMonero'] = state['newMonero'] + 5
              state['xmrs'] = 5
          euros += xmrs * rate
          logging.warn("at {} selling: {} xmr at rate {} for {} euros".format(toDate(analysis['x'][-1]), xmrs, rate, euros))
          xmrs = 0
          # sell here
          state['xmrs'] = 0
          state['euros'] = state['euros'] * rate
          save(state)

      def buy(analysis):
          nonlocal euros, xmrs, rate, firstOrder, newMoney, state
          rate = analysis['y'][-1]
          if euros == 0:
              firstOrder = False
              extraMoney = 5 * rate
              newMoney =+ extraMoney
              euros = extraMoney
              state['euros'] = 5 * rate
              state['newMoney'] = state['newMoney'] + state['euros']

          xmrs += euros / rate
          logging.warn("at {} buying: {} xmr at rate {} for {} euros".format(toDate(analysis['x'][-1]), xmrs, rate, euros))
          euros = 0

      tradeCommands = {
          TradeCommand.sell: sell,
          TradeCommand.buy: buy
      }

      run, events = take(7,
                         tradeCommands,
                         window_generator(3600 * 4,
                                          600,
                                          ,**all_data))
      # with caplog.at_level(logging.DEBUG):
      run()
      currentValueInEUROS = (xmrs * rate) + euros
      logging.warn("portfolio value {}".format(currentValueInEUROS - newMoney))
      logging.warn("Money {}".format(newMoney))
      assert  False
      #assert (xmrs * rate) + euros > newMoney * 3

#+END_SRC

**** execute
#+HEADER: :session test-profit
#+BEGIN_SRC ipython
  import pytest
  pytest.main(["-m" "profit_persist"])
#+END_SRC

#+NAME: exec-test-profit
#+HEADER: :session test-profit
#+HEADER: :results drawer replace
#+BEGIN_SRC sh
  pipenv run pytest -m profit_persist
#+END_SRC

#+RESULTS: exec-test-profit
:RESULTS:
[32m[22mCourtesy Notice[39m[22m: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project. You can set [39m[1mPIPENV_IGNORE_VIRTUALENVS=1[39m[22m to force pipenv to ignore that environment and create its own instead.
============================ test session starts ============================
platform linux -- Python 3.5.3, pytest-3.6.3, py-1.5.4, pluggy-0.6.0
rootdir: /home/kristian/projects/trading, inifile:
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
/home/kristian/.local/share/virtualenvs/trading-xHDJ7tx5/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88
  return f(*args, **kwds)
collecting 0 items                                                          collecting 1 item                                                           collecting 2 items                                                          collecting 16 items                                                         collecting 19 items                                                         collecting 20 items                                                         collecting 22 items                                                         collecting 24 items                                                         collecting 25 items                                                         collecting 27 items                                                         collecting 28 items                                                         collecting 29 items                                                         collecting 30 items                                                         collecting 31 items                                                         collecting 32 items                                                         collecting 33 items                                                         collecting 34 items                                                         collecting 35 items                                                         collecting 36 items                                                         collecting 38 items                                                         collected 38 items / 37 deselected
]

================================= FAILURES ==================================
________________________________ test_profit ________________________________
}
@pytest.mark.profit_persist
    def test_profit(all_data, caplog):
        newMoney = 0
        newXMR = 0
        euros = 0
        xmrs = 0
        rate = -1
        firstOrder = True
        topic = "trading"
        state = load(topic)
assert {} == state
E       assert {} == None

tests/trading/test_profit_persist.py:21: AssertionError
================== 1 failed, 37 deselected in 3.79 seconds ==================
:END:


#+BEGIN_SRC ipython
  import pytest
  pytest.main(["-m" "profit"])

#+END_SRC

#+RESULTS:
: # Out[13]:
: : 1
: [[file:./obipy-resources/29698o5M.png]]

** Scratch
#+BEGIN_SRC ipython
  def hest(hjort):
      pass

  hest.
#+END_SRC
** Three generator functions
*** data/window_generator
*** data/streamWindow
*** test_kraken/data_gen
** Why sqlite
  The reason for sqlite: kraken returns pandas which can probably be
  queried, but sqlite is more general and not all APIs return pandas
